module MB
  module M
    # Methods related to trigonometry.
    module TrigMethods
      # The first antiderivative of the cosecant function, using exponential
      # instead of sine to preserve both real and imaginary components.
      #
      # The imaginary part looks like a square wave.
      #
      # See https://en.wikipedia.org/wiki/Integral_of_the_secant_function#Hyperbolic_forms
      # See https://www.wolframalpha.com/input/?i=INTEGRATE+%282i%2F%28e%5E%28i*z%29-e%5E%28-i*z%29%29%29
      def csc_int(x)
        # Scale and offset adjusted to match plot on Wolfram Alpha
        # FIXME: this does not return the correct imaginary component when given an imaginary argument
        -2.0 * CMath.atanh(CMath.exp(1i * x)).conj + Math::PI / 2i
      end

      # The second antidervative of the cosecant (or at least the
      # antiderivative of #csc_int).  Only accepts real arguments.
      #
      # The imaginary part looks like a triangle wave within -pi..pi.
      #
      # Sage command: f = integrate(-2*atanh(e^(i*x)), x)
      def csc_int_int(x)
        return lookup_integrate_2_arctanh_e_i_x_x(x)

        # The derivative (#csc_int) has discontinuities at 0 and pi so we have
        # to fill in these gaps.
        return 2.46740110027234i if x == 0
        return -2.46740110027234i if x == Math::PI || x == -Math::PI

        x * (CMath.log(CMath.exp(1i * x) + 1) - CMath.log(CMath.exp(1i * x) - 1)) -
          2 * x * CMath.atanh(CMath.exp(1i * x)) +
          1i * CMath.log(-CMath.exp(1i * x)) * CMath.log(CMath.exp(1i * x) + 1) +
          x * CMath.log(CMath.exp(1i * x) - 1) +
          1i * dilog(CMath.exp(1i * x) + 1) -
          1i * dilog(-CMath.exp(1i * x) + 1)
      end

      private

      # Automatically generated lookup table of integrate(-2 * arctanh(e ^ (i * x)), x) from -1.5707963267948966 to 0.0
      # Generated by experiments/lookup_table.rb from mb-math
      # experiments/lookup_table.rb "integrate(-2 * arctanh(e ^ (i * x)), x)" -1.5707963267948966 0.0 50
      LOOKUP_INTEGRATE_2_ARCTANH_E_I_X_X = Numo::DComplex[
        (1.83193118835444+5.55111512312578e-17i),
        (1.83141731654276+0.0503551244953543i),
        (1.82987517261707+0.100710248990708i),
        (1.82730316838372+0.151065373486062i),
        (1.82369864774652+0.201420497981415i),
        (1.81905787292591+0.251775622476769i),
        (1.81337600492115+0.302130746972123i),
        (1.80664707796424+0.352485871467477i),
        (1.79886396763182+0.402840995962831i),
        (1.79001835219128+0.453196120458185i),
        (1.78010066665624+0.503551244953539i),
        (1.7691000489117+0.553906369448893i),
        (1.75700427713798+0.604261493944247i),
        (1.74379969760906+0.6546166184396i),
        (1.72947114176164+0.704971742934955i),
        (1.7140018312186+0.755326867430308i),
        (1.69737326919665+0.805681991925662i),
        (1.67956511642255+0.856037116421016i),
        (1.66055504931233+0.90639224091637i),
        (1.64031859771584+0.956747365411724i),
        (1.61882895897356+1.00710248990708i),
        (1.59605678434395+1.05745761440243i),
        (1.57196993300063+1.10781273889779i),
        (1.54653318771739+1.15816786339314i),
        (1.51970792498806+1.20852298788849i),
        (1.4914517305731+1.25887811238385i),
        (1.46171794919819+1.3092332368792i),
        (1.4304551541733+1.35958836137455i),
        (1.39760651880122+1.40994348586991i),
        (1.36310906624313+1.46029861036526i),
        (1.32689276748249+1.51065373486062i),
        (1.2888794474059+1.56100885935597i),
        (1.2489814456425+1.61136398385132i),
        (1.20709995989808+1.66171910834668i),
        (1.16312297230695+1.71207423284203i),
        (1.11692261935186+1.76242935733739i),
        (1.06835180583132+1.81278448183274i),
        (1.01723977073139+1.86313960632809i),
        (0.963386165808801+1.91349473082345i),
        (0.906552966254991+1.9638498553188i),
        (0.846453120630192+2.01420497981415i),
        (0.782734110506432+2.06456010430951i),
        (0.714953198956405+2.11491522880486i),
        (0.642538337334274+2.16527035330022i),
        (0.564722528298883+2.21562547779557i),
        (0.480424326822613+2.26598060229092i),
        (0.388004210714179+2.31633572678628i),
        (0.284674674095987+2.36669085128163i),
        (0.16456034907152+2.41704597577699i),
        (0+2.46740110027234i)
      ]

      # Handles expansion of quarter-wave lookup table
      def get_lookup_i2aeixx(idx)
        # Imaginary component will be generated directly, as quarter-wave lookup does not return the correct values
        v = MB::M.fetch_bounce(LOOKUP_INTEGRATE_2_ARCTANH_E_I_X_X, idx).real
        v *= -1 if ((idx + 49) / 98).odd?
        v
      end

      # Automatically generated (then manually modified) lookup-table-based
      # approximation of integrate(-2 * arctanh(e ^ (i * x)), x)
      # Uses 11 steps between -1.5707963267948966 and 0.0
      # Generated by experiments/lookup_table.rb from mb-math with the help of Sage
      def lookup_integrate_2_arctanh_e_i_x_x(x, alpha = 0)
        x = (x + Math::PI) % (2.0 * Math::PI) - Math::PI

        offset = MB::M.scale(x, -1.5707963267948966..0.0, 0..49)
        idx = offset.floor
        frac = offset - idx
        real = MB::M.catmull_rom(
          get_lookup_i2aeixx(idx - 1),
          get_lookup_i2aeixx(idx),
          get_lookup_i2aeixx(idx + 1),
          get_lookup_i2aeixx(idx + 2),
          frac,
          alpha
        )[1]

        # Triangle wave borrowed from mb-sound
        phi = (x - Math::PI / 2) % (2.0 * Math::PI)
        if phi < 0.5 * Math::PI
          # Initial rise from 0..1 in 0..pi/2
          imag = phi * 2.0 / Math::PI
        elsif phi < 1.5 * Math::PI
          # Fall from 1..-1 in pi/2..3pi/2
          imag = 2.0 - phi * 2.0 / Math::PI
        else
          # Final rise from -1..0 in 3pi/2..2pi
          imag = phi * 2.0 / Math::PI - 4.0
        end

        real - 2.46740110027234i * imag
      end
    end
  end
end
